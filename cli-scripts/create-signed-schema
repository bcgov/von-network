# ===================================================================================
# Write an Author signed Schema Transaction to a File
# -----------------------------------------------------------------------------------
# Writes an author signed schema transaction to a file.
# The resulting file contains a signed schema trasaction that is ready to be signed
# by the identified endorser and written to the ledger.
#
#   - This is a schema author (issuer) operation.
#
#   - In order to set the protocol version you MUST connect to a pool.
#     If you do not, the protocolVersion in the resulting transaction will be set to 1.
#       - Libindy uses a global variable for the protocol version, you can not set it 
#         in the cli without connecting to a pool.
#
#   - A wallet containing the author's DID MUST be attacted and open.
#   - The endorser's DID can be specified in the 'ledger schema' command,
#     however it will NOT be written to the transaction unless the transaction is also
#     signed by the author.  This can all be done in a single command, it does not need
#     to be done multiple steps.
#
# Examples:
# ./manage \
#   indy-cli create-signed-schema \
#   walletName=myorg_issuer \
#   poolName=localpool \
#   authorDid=NFP8kaWvCupbDQHQhErwXb \
#   endorserDid=DFuDqCYpeDNXLuc3MKooX3 \
#   schemaName=ian-permit.ian-co \
#   schemaVersion=1.0.0 \
#   schemaAttributes=corp_num,legal_name,permit_id,permit_type,permit_issued_date,permit_status,effective_date \
#   outputFile=/tmp/ian-permit.ian-co_author_signed_schema.txn
#
# ./manage \
#   indy-cli create-signed-schema \
#   walletName=myorg_issuer \
#   storageType=postgres_storage \
#   storageConfig='{"url":"192.168.65.3:5435"}' \
#   storageCredentials='{"account":"DB_USER","password":"DB_PASSWORD","admin_account":"postgres","admin_password":"mysecretpassword"}' \
#   poolName=localpool \
#   authorDid=NFP8kaWvCupbDQHQhErwXb \
#   endorserDid=DFuDqCYpeDNXLuc3MKooX3 \
#   schemaName=ian-permit.ian-co \
#   schemaVersion=1.0.0 \
#   schemaAttributes=corp_num,legal_name,permit_id,permit_type,permit_issued_date,permit_status,effective_date \
#   outputFile=/tmp/ian-permit.ian-co_author_signed_schema.txn
#
# Params:
# walletName:
#   - The name of the wallet to be imported.
#   - Example; myorg_issuer
#
# storageType:
#   - Optional - The wallet storage type.  Defaults to 'default'.
#   - Remote Wallet Example; postgres_storage
#   - Local Wallet Example; default
#
# storageConfig:
#   - Optional - The wallet storage configuration.  Defaults to '{}'.
#   - Remote Wallet Example; '{"url":"192.168.65.3:5435"}'
#   - Local Wallet Example; '{}'
#
# storageCredentials:
#   - Optional - The wallet storage credentials.  Defaults to '{}'.
#   - Remote Wallet Example; '{"account":"DB_USER","password":"DB_PASSWORD","admin_account":"postgres","admin_password":"mysecretpassword"}'
#   - Local Wallet Example; '{}'
# 
# poolName:
#   - The name of the ledger pool to use during the operations.
#   - Nothing is actually written to the pool.  The pool is opened simply to have 
#     the protocolVersion set to the correct value.
#   - Example; sandbox
#
# authorDid:
#   - The DID of the schema author.
#   - Example; VePGZfzvcgmT3GTdYgpDiT
#
# endorserDid:
#   - The DID of the endorser.
#   - Example; DFuDqCYpeDNXLuc3MKooX3
#
# schemaName:
#   - The name of the schema.
#   - Example; ian-permit.ian-co
#
# schemaVersion:
#   - The schema version.
#   - Example; 1.0.0
#
# schemaAttributes:
#   - Comma separated list of schema attribrutes.
#   - Example; corp_num,legal_name,permit_id,permit_type,permit_issued_date,permit_status,effective_date
#
# outputFile:
#   - The full path to the file to write the transaction.
#   - Example; /tmp/dev_schema_signed.txt
# ===================================================================================

load-plugin library=libindystrgpostgres.so initializer=postgresstorage_init

# Connecting to the pool is required to set the protocolVersion to the expected value.
# Nothing is actually being written or read from the ledger by this script.
pool connect ${poolName}

-wallet attach ${walletName} storage_type=${storageType} storage_config=${storageConfig}
wallet open ${walletName} key storage_credentials=${storageCredentials}
did use ${authorDid}
ledger schema sign=true endorser=${endorserDid} name=${schemaName} version=${schemaVersion} attr_names=${schemaAttributes}
ledger save-transaction file=${outputFile}
did list
wallet close
exit
